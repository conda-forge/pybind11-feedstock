{% set version = "2.13.6" %}
{% set sha256 = "e08cb87f4773da97fa7b5f035de8763abc656d87d5773e62f6da0587d1f0ec20" %}

# this is set to PYBIND11_INTERNALS_VERSION
# since 2.12.0 pybind11 defines two ABI version. 4 and 5 for 3.12+ or msvc.
# https://github.com/pybind/pybind11/blob/v2.12.0/include/pybind11/detail/internals.h#L40
{% set abi_version = "4" %}     # [py<312 and not win]
{% set abi_version = "5" %}     # [py>=312 or win]

package:
  name: pybind11-split
  version: {{ version }}

source:
  fn: pybind11-{{ version }}.tar.gz
  url: https://github.com/pybind/pybind11/archive/v{{ version }}.tar.gz
  sha256: {{ sha256 }}

build:
  number: 1

requirements:
  build:
    # ensure we split up CI jobs
    - python  # [linux64]

outputs:
  - name: pybind11-abi
    version: {{ abi_version }}
    build:
      noarch: generic
      skip: true  # [not linux64]
      run_exports:
        - pybind11-abi =={{ abi_version }}
    test:
      source_files:
        - include/pybind11/detail/internals.h
      commands:
        # the ABI version depends on both python version and operating system, so just check if the used version is one of the one defined in the header 
        - matched=false; while read -r version; do [ "$version" -eq "{{ abi_version }}" ] && { matched=true; break; }; done < <(awk '/define PYBIND11_INTERNALS_VERSION/{print $NF}' include/pybind11/detail/internals.h); [ "$matched" = true ] && exit 0 || exit 1


  - name: pybind11-global
    script: build-pybind11-global.sh  # [unix]
    script: build-pybind11-global.bat  # [win]
    requirements:
      build:
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - cmake
        - make  # [unix]
        - {{ compiler('cxx') }}
        - {{ stdlib("c") }}
      host:
        - python
        - pip
        - setuptools
      run:
        - python
      run_constrained:
        - pybind11-abi =={{ abi_version }}
    test:
      commands:
        - echo "works!"

  - name: pybind11
    script: build-pybind11.sh  # [unix]
    script: build-pybind11.bat  # [win]
    build:
      script_env:
        - EXPECTED_PYBIND11_INTERNALS_VERSION={{ abi_version }}
    requirements:
      build:
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - cmake
        - make  # [unix]
        - {{ compiler('cxx') }}
        - {{ stdlib("c") }}
      host:
        - python
        - pip
        - setuptools
      run:
        - python
        - {{ pin_subpackage("pybind11-global", exact=True) }}
      run_constrained:
        - pybind11-abi =={{ abi_version }}
    test:
      files:
        - test_abi
      imports:
        - pybind11
      script: run-test-pybind11.sh  # [unix]
      script: run-test-pybind11.bat  # [win]
      commands:
        - test -f ${PREFIX}/share/cmake/pybind11/pybind11Config.cmake                                     # [unix]
        - if exist %LIBRARY_PREFIX%\share\cmake\pybind11\pybind11Config.cmake (exit 0) else (exit 1)      # [win]
        - test -f ${PREFIX}/include/pybind11/pybind11.h      # [unix]
        - if exist %LIBRARY_INC%\pybind11\pybind11.h (exit 0) else (exit 1)      # [win]
        - test -f $(python -c "import pybind11 as py; print(py.get_include())")/pybind11/pybind11.h      # [unix]
        - if exist $(python -c "import pybind11 as py; print(py.get_include())")\pybind11\pybind11.h (exit 0) else (exit 1)      # [win]
      requires:
        - cmake
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - ninja

about:
  home: https://github.com/pybind/pybind11/
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE
  summary: Seamless operability between C++11 and Python
  doc_url: https://pybind11.readthedocs.io/

extra:
  recipe-maintainers:
    - ax3l
    - SylvainCorlay
    - wjakob
    - henryiii
